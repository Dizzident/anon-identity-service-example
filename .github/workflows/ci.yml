name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
          
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run TypeScript type checking
      run: npx tsc --noEmit
      
    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-node-${{ matrix.node-version }}
        path: coverage/
        retention-days: 7
        
    - name: Build TypeScript project
      run: npm run build
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: anon-identity-service:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 3000:3000 anon-identity-service:test
        sleep 10
        curl -f http://localhost:3000/service/health || exit 1
        docker stop test-container
        
  lint-dockerfile:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check for duplicate dependencies
      run: npx depcheck
      continue-on-error: true
      
    - name: Check for outdated dependencies
      run: npm outdated
      continue-on-error: true
      
    - name: Analyze bundle size
      run: |
        npm run build
        echo "Build size:"
        du -sh dist/
        
  all-checks-pass:
    name: All Checks Pass
    runs-on: ubuntu-latest
    needs: [test, docker, lint-dockerfile, code-quality]
    if: always()
    
    steps:
    - name: Check if all jobs passed
      run: |
        if [[ "${{ needs.test.result }}" != "success" || 
              "${{ needs.docker.result }}" != "success" || 
              "${{ needs.lint-dockerfile.result }}" != "success" || 
              "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "One or more jobs failed"
          exit 1
        fi
        echo "All checks passed successfully!"